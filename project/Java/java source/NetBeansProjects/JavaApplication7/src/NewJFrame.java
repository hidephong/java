
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Signature;
import java.security.SignatureException;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewJFrame.java
 *
 * Created on Oct 19, 2010, 1:41:45 PM
 */

/**
 *
 * @author Lovely
 */
public class NewJFrame extends javax.swing.JFrame {
public void keyg() throws NoSuchAlgorithmException, NoSuchProviderException, FileNotFoundException, IOException, SignatureException{
        try {
            long randomseed = 0;
            KeyPairGenerator kpg = KeyPairGenerator.getInstance("DSA", "SUN");
            SecureRandom s = SecureRandom.getInstance("SHA1PRNG", "SUN");
            s.setSeed(randomseed);
            kpg.initialize(1024, s);
            KeyPair kp = kpg.generateKeyPair();
            PrivateKey pvk = kp.getPrivate();
            PublicKey puk = kp.getPublic();
            Signature sn = Signature.getInstance("SHA1withDSA", "SUN");
            sn.initSign(pvk);

            FileInputStream fis=new FileInputStream("test.txt");
            BufferedInputStream bis= new BufferedInputStream(fis);
            byte[] buff=new byte[1024];
            int bufflenght;
            while(bis.available()!=0){
            bufflenght=bis.read(buff);
            sn.update(buff,0,bufflenght);
            }

            bis.close();
            byte[] realSign =sn.sign();
            FileOutputStream fos= new FileOutputStream("sign");
            fos.write(realSign);
            fos.close();
            byte[] pub=puk.getEncoded();
            FileOutputStream fos1=new FileOutputStream("publickey");
            fos1.write(pub);
            fos1.close();

        } catch (InvalidKeyException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
}
    /** Creates new form NewJFrame */
    public NewJFrame() {
        try {
            initComponents();
            keyg();
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchProviderException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SignatureException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
